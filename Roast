#!/usr/bin/python3
# RaspberryRoast Client
# © 2015 Christopher C. Roberts (c.carver.roberts@gmail.com)
# Not for commercial use.
# Please contact c.carver.roberts@gmail.com for commercial use.

import os, sys, time, queue, threading

# external dependencies
from PyQt4.QtCore import *
from PyQt4.QtGui import *

# internal dependencies
from DeviceManager import DeviceManager
from ProfileManager import ProfileManager
from RoastGraph import RoastGraph, VelocityGraph
from RoastProfile import RoastProfile


# Used for spacing GUI elements in the toolbar
class Spacer(QWidget):
  def __init__(self, parent=None):
    QWidget.__init__(self, parent)
    self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding) 


# Main roast profiling window
class RoastWindow(QMainWindow):
  def __init__(self):
    super(RoastWindow, self).__init__()
    # states
    self.running = True
    self.connected = False
    self.thread = None
    # Timing
    self.t = time.time()
    self.tStart = self.t
    self.T = 0.
    self.timerUpdate = QTimer()
    self.timerUpdate.timeout.connect(self.update)
    self.timerUpdate.start(1000)
    # create an active profile to record into
    self.activeProfile = RoastProfile()
    self.profiles = [self.activeProfile]
    # create a data queue for incoming temperature data
    # TODO make these arrays for multiple devices
    self.dataQueue = queue.Queue()
    self.device = None
    ##################
    ## GUI elements ##
    ##################
    self.setWindowTitle('Roast')
    # Graphs
    self.Tgraph = RoastGraph(self)
    self.Tgraph.setMinimumHeight(600.)
    self.Tgraph.plots.append(self.activeProfile)
    self.dTgraph = VelocityGraph(self)
    self.dTgraph.plots.append(self.activeProfile)
    # Layout
    self.grid = QGridLayout()
    self.grid.addWidget(self.Tgraph, 0, 0, 1, 1)
    self.grid.addWidget(self.dTgraph, 1, 0, 1, 1)
    self.grid.setRowStretch(0, 1)
    self.grid.setColumnStretch(0, 1)
    self.gridWidget = QWidget()
    self.gridWidget.setLayout(self.grid)
    self.setCentralWidget(self.gridWidget)
    # Menu
    # -File
    menubar = self.menuBar()
    fileMenu = menubar.addMenu('&File')
    loadProfileAction = QAction(QIcon.fromTheme('open'), '&Load Reference Profile', self)        
    loadProfileAction.triggered.connect(self.loadProfile)
    fileMenu.addAction(loadProfileAction)
    profileManager = QAction('Profile Manager...', self)
    profileManager.triggered.connect(self.manageProfiles)
    fileMenu.addAction(profileManager)
    fileMenu.addSeparator()
    exitAction = QAction(QIcon('exit.png'), '&Exit', self)        
    exitAction.triggered.connect(self.closeEvent)
    fileMenu.addAction(exitAction)
    # -Connection
    connMenu = menubar.addMenu('&Connection')
    setDevice = QAction('Device Driver...', self)
    setDevice.triggered.connect(lambda: self.deviceMan.show())
    connMenu.addAction(setDevice)
    self.connectAction = QAction('&Connect', self)        
    self.connectAction.triggered.connect(self.connectDevice)
    connMenu.addAction(self.connectAction)
    self.disconnectAction = QAction('&Disconnect', self)        
    self.disconnectAction.triggered.connect(self.disconnectDevice)
    self.disconnectAction.setEnabled(False)
    connMenu.addAction(self.disconnectAction)
    # Status bar
    self.statusBar().showMessage('')
    # Toolbar
    self.startAction = QAction('Start Roast', self)
    self.startAction.triggered.connect(self.startRoast)
    self.startAction.setEnabled(False)
    self.stopAction = QAction('Stop Roast', self)
    self.stopAction.triggered.connect(self.stopRoast)
    self.stopAction.setEnabled(False)
    self.labelT = QLabel('')
    self.labeldT = QLabel('')
    self.labelt = QLabel('')
    commentAction = QAction('Add Comment', self)
    commentAction.triggered.connect(self.recordComment)
    toolbar = self.addToolBar('Toolbar')
    toolbar.setMovable(False)
    toolbar.setFloatable(False)
    toolbar.addAction(self.startAction)
    toolbar.addAction(self.stopAction)
    toolbar.addSeparator()
    toolbar.addWidget(Spacer()) 
    toolbar.addWidget(self.labelT)
    toolbar.addWidget(Spacer()) 
    toolbar.addWidget(self.labeldT)
    toolbar.addWidget(Spacer()) 
    toolbar.addWidget(self.labelt)
    toolbar.addWidget(Spacer()) 
    toolbar.addSeparator()
    toolbar.addAction(commentAction)
    ##  Dialogs
    self.deviceMan = DeviceManager(parent=self)
    self.deviceMan.show()
    self.profileMan = ProfileManager(parent=self)

  def manageProfiles(self):
    self.profileMan.update()
    self.profileMan.show()

  def connectDevice(self):
    self.connectAction.setEnabled(False)
    self.statusBar().showMessage('Attempting connection...')
    self.device.connect()

  def connectEvent(self):
    self.connected = True
    self.statusBar().showMessage('Connected to device')
    self.connectAction.setEnabled(False)
    self.disconnectAction.setEnabled(True)
    self.startAction.setEnabled(True)
    self.tStart = time.time()
    self.thread = threading.Thread(target=self.device.loop)
    self.thread.start()

  def disconnectDevice(self):
    self.disconnectAction.setEnabled(False)
    self.device.disconnect()
    self.device.stop()
    self.thread.join(10)

  def disconnectEvent(self):
    self.connected = False 
    self.statusBar().showMessage('Disconnected')
    self.connectAction.setEnabled(True)
    self.disconnectAction.setEnabled(False)

  def startRoast(self):
    for i in range(len(self.activeProfile.x)):
      self.activeProfile.x[i] -= self.t
    for c in self.activeProfile.comments:
      c[0] -= self.t
    self.tStart = time.time()
    self.startAction.setEnabled(False)
    self.stopAction.setEnabled(True)

  def stopRoast(self):
    self.activeProfile.writeProfile('ROAST.csv')

  def closeEvent(self, ev):
    self.running = False
    if self.thread:
      self.thread.join(10)

  def recordComment(self):
    t = self.t
    T = self.T
    P, TF = QInputDialog.getText(self, "Record Comment:", "Record Comment:")
    if TF == True:
      self.activeProfile.comments.append([t, T, P])

  def loadProfile(self):
    filename = QFileDialog.getOpenFileName(self, 'Open file')
    if os.path.exists(filename) and os.path.isfile(filename):
      self.addProfile(filename)

  def addProfile(self, filename):
    rp = RoastProfile(filename=filename)
    self.Tgraph.plots.append(rp)
    self.dTgraph.plots.append(rp)
    self.profiles.append(rp)
    X = max(rp.x)
    X = (int(X / 60) + 1) * 60
    if X > self.Tgraph.boundsX[1]:
      self.Tgraph.boundsX[1] = X
      self.dTgraph.boundsX[1] = X

  def update(self):
    self.t = time.time() - self.tStart
    if self.connected:
      # calculate average T
      if round(self.t) % 2 == 0:
        aT = []
        while not self.dataQueue.empty():
          aT.append(self.dataQueue.get(0))
        if len(aT):
          aT = [x for x in aT if x < 350.]
          self.T = round(sum(aT)/len(aT), 1)
          self.activeProfile.append(self.t, self.T)
          self.labelT.setText('<font size="40"><b>T:</b> %6.2f°C</font>' % self.T)
          if len(self.activeProfile.dy) > 0:
            dddT = self.activeProfile.dy[-1]
          else:
            dddT = 0.
          self.labeldT.setText('<font size="40"><b>dT:</b> %6.2f°C/min</font>' % dddT)
      self.labelt.setText('<font size="40"><b>t:</b> %s</font>' % self.readableTime(self.t))
      self.Tgraph.update()
      self.dTgraph.update()
    if not self.running:
      rot.quit()

  def readableTime(self, s):
    tMin = int(s / 60)
    tSec = int(s % 60)
    stSec = ''
    if tSec < 10:
      stSec = '0%d' % tSec
    else:
      stSec = str(tSec)
    return '%d:%s' % (tMin, stSec)



if __name__ == '__main__':
  rot = QApplication(sys.argv)
  win = RoastWindow()
  rot.exec_()
