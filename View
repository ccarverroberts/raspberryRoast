#!/usr/bin/python3
# RaspberryRoast View
# © 2015 Christopher C. Roberts (CCRoberts@gmail.com)
# Not for commercial use.
# Please contact CCRoberts@gmail.com for commercial use.

import sys, time, queue, threading
from PyQt4.QtCore import *
from PyQt4.QtGui import *

# internal classes
from RoastGraph import RoastGraph
from RoastProfile import RoastProfile




class ViewWindow(QWidget):
  def __init__(self, *args):
    super(ViewWindow, self).__init__()
    
    self.Tgraph = RoastGraph(self)
    self.Tgraph.boundsX = [0., 900.]
    self.Tgraph.boundsY = [40., 260.]
    self.Tgraph.setMinimumWidth(1000.)
    self.Tgraph.setMinimumHeight(600.)
    self.Tgraph.padding[2] = 20.

    self.dTgraph = RoastGraph(self, )
    self.dTgraph.boundsX = [0., 900.]
    self.dTgraph.boundsY = [0., 40.]
    self.dTgraph.minorTickY = 5.
    self.dTgraph.majorTickY = 15.
    self.dTgraph.padding[2] = 20.
    self.dTgraph.setMinimumWidth(1000.)
    self.dTgraph.setMinimumHeight(200.)
    self.dTgraph.labelY = 'ΔT (°C/min)'

    self.grid = QGridLayout()
    self.grid.addWidget(self.Tgraph, 0, 0, 1, 7)
    self.grid.addWidget(self.dTgraph, 1, 0, 1, 7)
    self.grid.setRowStretch(0, 1)
    self.grid.setColumnStretch(0, 1)
    self.setLayout(self.grid)
    self.show()

  def addProfile(self, filename):
    rp = RoastProfile(filename=filename)
    self.Tgraph.Tplots.append(rp)
    self.dTgraph.dTplots.append(rp)
    X = max(rp.x)
    X = (int(X / 60) + 1) * 60
    if X > self.Tgraph.boundsX[1]:
      self.Tgraph.boundsX[1] = X
      self.dTgraph.boundsX[1] = X






if len(sys.argv) < 2:
  print('Usage: ./Aromatic REFERENCE_PROFILE_1 REFERENCE_PROFILE_2 ...')
  sys.exit()

rot = QApplication(sys.argv)
win = ViewWindow()
for fn in sys.argv[1:]:
  win.addProfile(fn)
sys.exit(rot.exec_())
